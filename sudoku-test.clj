(ns user (:use clojure.test))


;; transform
;; transform-row
(deftest test-transform-row
  (is (= [] (transform-row [])))
  (is (= [#{1}] (transform-row [1])))
  (is (= [#{7}] (transform-row [7])))
  (is (= [#{1 2 3 4 5 6 7 8 9}] (transform-row [0])))
  (is (= [#{1} #{5} #{6}] (transform-row [1 5 6])))
  (is (= [#{1} #{1 2 3 4 5 6 7 8 9} #{5} #{1 2 3 4 5 6 7 8 9} #{6}] (transform-row [1 0 5 0 6])))
  )

;; transform
(deftest test-transform
  (is (= [] (transform [])))
  (is (= [[#{1}]] (transform [[1]])))
  (is (= [[#{1 2 3 4 5 6 7 8 9}]] (transform [[0]])))
  (is (= [[#{1} #{5} #{6}][#{1 2 3 4 5 6 7 8 9} #{2} #{3}][#{1} #{1 2 3 4 5 6 7 8 9} #{2}]]
         (transform [[1 5 6][0 2 3][1 0 2]])))
  (is (= [[#{1 2 3 4 5 6 7 8 9} #{2} #{5} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9}]
          [#{1} #{1 2 3 4 5 6 7 8 9} #{4} #{2} #{5} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9}]
          [#{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{6} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{4} #{2} #{1} #{1 2 3 4 5 6 7 8 9} ]
          [#{1 2 3 4 5 6 7 8 9} #{5} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{3} #{2} #{1 2 3 4 5 6 7 8 9} ]
          [#{6} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{2} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{9}]
          [#{1 2 3 4 5 6 7 8 9} #{8} #{7} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{6} #{1 2 3 4 5 6 7 8 9}]
          [#{1 2 3 4 5 6 7 8 9} #{9} #{1} #{5} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{6} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9}]
          [#{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{7} #{8} #{1} #{1 2 3 4 5 6 7 8 9} #{3}]
          [#{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{6} #{1 2 3 4 5 6 7 8 9} #{1 2 3 4 5 6 7 8 9} #{5} #{9} #{1 2 3 4 5 6 7 8 9} ]
          ]
         (transform [
          [0 2 5 0 0 1 0 0 0]
          [1 0 4 2 5 0 0 0 0]
          [0 0 6 0 0 4 2 1 0]
          [0 5 0 0 0 0 3 2 0]
          [6 0 0 0 2 0 0 0 9]
          [0 8 7 0 0 0 0 6 0]
          [0 9 1 5 0 0 6 0 0]
          [0 0 0 0 7 8 1 0 3]
          [0 0 0 6 0 0 5 9 0]]))))



;; ##inverse transform
;; invers-trans-row
(deftest test-invers-trans-row
  (is (= [] (invers-trans-row ())))
  (is (= [1] (invers-trans-row [#{1}])))
  (is (= [7] (invers-trans-row [#{7}] )))
  (is (= [1 5 6] (invers-trans-row [#{1} #{5} #{6}])))
  (is (= [1 4 5 7 6] (invers-trans-row [#{1} #{4} #{5} #{7} #{6}] ))))

;; inverse-transform
(deftest test-inverse-transform
  (is (= [] (inverse-transform [])))
  (is (= [[1]] (inverse-transform [[#{1}]] )))
  (is (= [[5 3]] (inverse-transform [[#{5} #{3}]])))
  (is (= [[1 5 6][3 2 3][1 1 2]]
         (inverse-transform [[#{1} #{5} #{6}][#{3} #{2} #{3}][#{1} #{1} #{2}]]))))


;; ##solved?
;; solved-row?
(deftest test-solved-row?
  (is (= true (solved-row? [])))
  (is (= true (solved-row? [#{1}] )))
  (is (= false (solved-row? [#{5 2}])))
  (is (= false (solved-row? [#{5} #{5} #{1 2} #{3}]))))

;; solved?
(deftest test-solved?
  (is (= true (solved? [])))
  (is (= true (solved? [[#{1}]] )))
  (is (= false (solved? [[#{5} #{3 4}]])))
  (is (= true (solved? [[#{1} #{5} #{6}][#{3} #{2} #{3}][#{1} #{1} #{2}]])))
  (is (= false (solved? [[#{1} #{5} #{6}][#{3} #{2} #{3}][#{1} #{1 4} #{2}]]))))

;; solve
(deftest test-solve
  (is (= [[8 2 5 7 6 1 9 3 4]
          [1 3 4 2 5 9 7 8 6]
          [9 7 6 8 3 4 2 1 5]
          [4 5 9 1 8 6 3 2 7]
          [6 1 3 4 2 7 8 5 9]
          [2 8 7 3 9 5 4 6 1]
          [3 9 1 5 4 2 6 7 8]
          [5 6 2 9 7 8 1 4 3]
          [7 4 8 6 1 3 5 9 2]]
         (solve
         [
          [0 2 5 0 0 1 0 0 0]
          [1 0 4 2 5 0 0 0 0]
          [0 0 6 0 0 4 2 1 0]
          [0 5 0 0 0 0 3 2 0]
          [6 0 0 0 2 0 0 0 9]
          [0 8 7 0 0 0 0 6 0]
          [0 9 1 5 0 0 6 0 0]
          [0 0 0 0 7 8 1 0 3]
          [0 0 0 6 0 0 5 9 0]
         ])))
    (is (= [[4 5 3 8 2 6 1 9 7]
            [8 9 2 5 7 1 6 3 4]
            [1 6 7 4 9 3 5 2 8]
            [7 1 4 9 5 2 8 6 3]
            [5 8 6 1 3 7 2 4 9]
            [3 2 9 6 8 4 7 5 1]
            [9 3 5 2 1 8 4 7 6]
            [6 7 1 3 4 5 9 8 2]
            [2 4 8 7 6 9 3 1 5]]
         (solve
          [
           [4 5 0 0 0 0 0 0 0]
           [0 0 2 0 7 0 6 3 0]
           [0 0 0 0 0 0 0 2 8]
           [0 0 0 9 5 0 0 0 0]
           [0 8 6 0 0 0 2 0 0]
           [0 2 0 6 0 0 7 5 0]
           [0 0 0 0 0 0 4 7 6]
           [0 7 0 0 4 5 0 0 0]
           [0 0 8 0 0 9 0 0 0]
          ])))
      (is (= [[6 5 7 9 4 1 2 3 8]
              [1 2 3 6 5 8 9 4 7]
              [8 9 4 2 3 7 6 5 1]
              [7 6 5 1 2 3 4 8 9]
              [2 3 1 8 9 4 5 7 6]
              [9 4 8 7 6 5 1 2 3]
              [5 1 2 3 7 6 8 9 4]
              [3 8 9 4 1 2 7 6 5]
              [4 7 6 5 8 9 3 1 2]]
         (solve
           [
           [0 0 0 0 0 1 2 3 0]
           [1 2 3 0 0 8 0 4 0]
           [8 0 4 0 0 7 6 5 0]
           [7 6 5 0 0 0 0 0 0]
           [0 0 0 0 0 0 0 0 0]
           [0 0 0 0 0 0 1 2 3]
           [0 1 2 3 0 0 8 0 4]
           [0 8 0 4 0 0 7 6 5]
           [0 7 6 5 0 0 0 0 0]
          ])))
  (is (= [[5 3 9 8 7 6 4 1 2]
          [7 2 8 3 1 4 9 6 5]
          [6 4 1 2 9 5 7 3 8]
          [4 6 2 5 3 9 8 7 1]
          [3 8 5 7 2 1 6 4 9]
          [1 9 7 4 6 8 2 5 3]
          [2 5 6 1 8 7 3 9 4]
          [9 1 3 6 4 2 5 8 7]
          [8 7 4 9 5 3 1 2 6]]
         (solve
             [
             [5 0 9 0 0 0 4 0 2]
             [7 0 8 3 0 4 9 0 0]
             [6 0 1 0 0 0 7 3 0]
             [4 6 2 5 3 9 0 0 0]
             [3 8 5 7 2 1 6 4 9]
             [1 9 7 4 6 8 2 0 0]
             [2 0 0 1 0 0 0 0 4]
             [0 0 3 0 4 0 0 8 7]
             [0 7 0 0 5 3 0 0 6]
            ])))
  (is (= [[4 2 6 5 7 1 3 9 8]
          [8 5 7 2 9 3 1 4 6]
          [1 3 9 4 6 8 2 7 5]
          [9 7 1 3 8 5 6 2 4]
          [5 4 3 7 2 6 8 1 9]
          [6 8 2 1 4 9 7 5 3]
          [7 9 4 6 3 2 5 8 1]
          [2 6 5 8 1 4 9 3 7]
          [3 1 8 9 5 7 4 6 2]]
         (solve
         [
         [0 2 0 5 0 1 0 9 0]
         [8 0 0 2 0 3 0 0 6]
         [0 3 0 0 6 0 0 7 0]
         [0 0 1 0 0 0 6 0 0]
         [5 4 0 0 0 0 0 1 9]
         [0 0 2 0 0 0 7 0 0]
         [0 9 0 0 3 0 0 8 0]
         [2 0 0 8 0 4 0 0 7]
         [0 1 0 9 0 7 0 6 0]
        ])))
  (is (= [[2 5 6 8 3 7 1 4 9]
          [7 1 9 4 2 5 8 3 6]
          [8 4 3 6 1 9 2 5 7]
          [4 6 7 1 5 8 9 2 3]
          [3 9 2 7 6 4 5 1 8]
          [5 8 1 3 9 2 6 7 4]
          [1 7 8 2 4 6 3 9 5]
          [6 3 5 9 7 1 4 8 2]
          [9 2 4 5 8 3 7 6 1]]
         (solve
         [
          [0 0 0 8 0 0 0 0 9]
          [0 1 9 0 0 5 8 3 0]
          [0 4 3 0 1 0 0 0 7]
          [4 0 0 1 5 0 0 0 3]
          [0 0 2 7 0 4 0 1 0]
          [0 8 0 0 9 0 6 0 0]
          [0 7 0 0 0 6 3 0 0]
          [0 3 0 0 7 0 0 8 0]
          [9 0 4 5 0 0 0 0 1]
        ])))
)


(run-tests)
